paths:
  /api/v1/users:
    get:
      tags:
        - User
      summary: Get all users
      description: return a json with paginated users
      parameters:
        - name: page
          in: query
          description: what page do you want to show, if it exists several of them
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: it sends a limit number of users per request
          required: true
          schema:
            type: integer
      responses: 
        '200':
          description: return paginated users including their member and schedules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'  
        '400':
          description: return an error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/v1/users/{id}:
    get:
      tags: 
        - User by Id
      summary: Get user by id
      description: return a json with a user
      parameters:
        - name: id
          in: path
          description: what user do you want to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a json with a user by id including their member and schedules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: return an error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  